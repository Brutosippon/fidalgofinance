###########################################
#Objetivo:
#Criar um apagina web com registo de user login
#Criar formulario que permita introduzir um balance sheet guardar em um abase SQL
#Criar uma tabela que apresente os principais rácios
###########################################
import os

from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True


# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
# export API_KEY=pk_9d85ff902d6e4e1b925165b01b9597f9
#   https://cloud.iexapis.com/stable/stock/nflx/quote?token=pk_9d85ff902d6e4e1b925165b01b9597f9
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
app.config["API_KEY"] = 'pk_9d85ff902d6e4e1b925165b01b9597f9'
Session(app)

###########################################
###########################################
# Configure CS50 Library to use SQLite database
###########################################
###########################################
db = SQL("sqlite:///finance.db")

# Make sure API key is set
if not os.environ.get("API_KEY"):
    #pass
    raise RuntimeError("API_KEY not set")

###########################################
###########################################
# executade de forma automatica uma tabela html conforme os numeros de campos presentes na db
###########################################
###########################################
@app.route("/", methods=["GET", "POST"])
@login_required
def index():
    #return render_template("index.html")
    #"""Show rubricas of balanço"""
    resultado =db.execute("""
    SELECT *
    FROM base_balanco
    WHERE user_id=:id""",id=session["user_id"])
    base_balanco = []
    print (len(resultado))
    for r in resultado:
        base_balanco.append({"ANO_N": r["ANO_N"]})
    return render_template("index.html", base_balanco=base_balanco)

###########################################
###########################################
# executade de forma automatica uma tabela BAlANCO em html conforme os numeros de campos presentes na db
###########################################
###########################################
@app.route("/balanco", methods=["GET", "POST"])
@login_required
def balanco():
    #return render_template("index.html")
    #"""Show rubricas of balanço"""
    resultado =db.execute("""
    SELECT rubrica
    FROM balanco""")
    balanco = []
    print (len(resultado))
    for r in resultado:
        balanco.append({"rubrica": r["rubrica"]})
    return render_template("balanco.html", balanco=balanco)

@app.route("/balanco", methods=["GET", "POST"])
@login_required
def save():
    """save balanco dr"""
    if request.method == 'POST':
        find_missing =  is_provided("NIF") or is_provided("ANO_N")
        if find_missing:
            return find_missing
        elif not request.form.get("NIF").isdigit():
            return apology("compleate the order")
        NIF = int(request.form.get("NIF"))
        ANO_N = int(request.form.get("ANO_N"))

#        row = db.execute("SELECT cash FROM users WHERE id=:id", id=session["user_id"])
#        cash = row[0]["cash"]
#        update_cash = cash - shares * stock ['price']
#        if update_cash < 0:
#            return apology("don't have enough cash")
#        db.execute("UPDATE users SET cash=:update_cash WHERE id=:id", update_cash=update_cash, id=session["user_id"])
        db.execute("""
            INSERT INTO base_balanco
                (NIF, ANO_N)
            VALUES (:NIF,:ANO_N)
            """,
            NIF=NIF["NIF"],
            ANO_N=ANO_N["ANO_N"],
        )
        flash("Saved!")
        return redirect("/")

    else:
        return render_template("balanco.html")
###########################################
###########################################
###########################################
@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""
    if request.method == 'POST':
        find_missing =  is_provided("symbol") or is_provided("shares")
        if find_missing:
            return find_missing
        elif not request.form.get("shares").isdigit():
            return apology("compleate the order")
        symbol = request.form.get("symbol").upper()
        shares = int(request.form.get("shares"))
        stock = lookup(symbol)
        if stock is None:
            return apology("invalid symbol")
        row = db.execute("SELECT cash FROM users WHERE id=:id", id=session["user_id"])
        cash = row[0]["cash"]
        update_cash = cash - shares * stock ['price']
        if update_cash < 0:
            return apology("don't have enough cash")
        db.execute("UPDATE users SET cash=:update_cash WHERE id=:id", update_cash=update_cash, id=session["user_id"])
        db.execute("""
            INSERT INTO transactions
                (user_id, symbol, shares, price)
            VALUES (:user_id, :symbol, :shares, :price)
            """,
            user_id=session["user_id"],
            symbol=stock["symbol"],
            shares=shares,
            price=stock["price"]
        )
        flash("Bought!")
        return redirect("/")

    else:
        return render_template("buy.html")
###########################################
###########################################
@app.route("/additional", methods=["GET", "POST"])
@login_required
def additional_cash():
    if request.method == "POST":
        db.execute("""
            UPDATE users
            SET cash = cash + :amount
            WHERE id=:user_id
        """, amount = request.form.get("cash"), user_id=session["user_id"])
        flash("Additional Cash UPDATED!")
        return redirect("/")
    else:
        return render_template("additional.html")

###########################################
###########################################

@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    transactions=db.execute("""
    SELECT symbol, shares, price, transacted
    FROM transactions
    WHERE user_id=:user_id
    """, user_id=session["user_id"])
    for i in range(len(transactions)):
        transactions[i]["price"] = usd(transactions[i]["price"])
    return render_template("history.html", transactions=transactions)


###########################################
###########################################
# configurar login e logout da web-app
###########################################
def is_provided(field):
    if not request.form.get(field):
        return apology(f"must provide {field}", 403)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        # Ensure password was submitted
        result_checks = is_provided("username") or is_provided("password")
        if result_checks is not None:
            return result_checks

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = ?", request.form.get("username"))

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")
###########################################
# configurar login e logout da web-app
###########################################

@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")
###########################################
###########################################





############################################

@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""
    if request.method == "POST":
        result_checks = is_provided("username") or is_provided("password")
        if result_checks != None:
            return result_checks
        if request.form.get("password") != request.form.get("confirmation"):
            return apology("password do not match",400)

        primary_key = db.execute("INSERT INTO users (username, hash) VALUES (:username, :hash)",
        username=request.form.get("username"), hash=generate_password_hash(request.form.get("password")))
        #return apology("Already register",403)
        #user_checks = is_provided("username")
        #if user_checks == primary_key:

        if primary_key is None:
            return apology("Not Register",400)
        session["user_id"] = primary_key
        return redirect("/")
    else:
        return render_template("register.html")
        
        # Ensure username was submitted
#        if not request.form.get("username"):
#            return apology("must provide username", 403)

        # Ensure password was submitted
#        elif not request.form.get("password"):
#            return apology("must provide password", 403)

        # Query database for username
#        rows = db.execute("SELECT * FROM users WHERE username = ?", request.form.get("username"))

        # Ensure username exists and password is correct
#        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
#            return apology("invalid username and/or password", 403)


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    if request.method == 'POST':
        find_missing =  is_provided("symbol") or is_provided("shares")
        if find_missing:
            return find_missing
        elif not request.form.get("shares").isdigit():
            return apology("compleate the order")
        symbol = request.form.get("symbol").upper()
        shares = int(request.form.get("shares"))
        stock = lookup(symbol)
        if stock is None:
            return apology("invalid symbol")

        rows = db.execute("""
            SELECT symbol, SUM(shares) AS TShares
            FROM transactions
            WHERE user_id=:user_id
            GROUP BY symbol
            HAVING TShares > 0;
        """, user_id=session["user_id"])
        for row in rows:
            if row["symbol"] == symbol:
                if shares > row ["TShares"]:
                    return apology("don't have enought shares",400)


        row = db.execute("SELECT cash FROM users WHERE id=:id", id=session["user_id"])
        cash = row[0]["cash"]

        update_cash = cash + shares * stock ['price']
        db.execute("UPDATE users SET cash=:update_cash WHERE id=:id", update_cash=update_cash, id=session["user_id"])
        db.execute("""
            INSERT INTO transactions
                (user_id, symbol, shares, price)
            VALUES (:user_id, :symbol, :shares, :price)
            """,
            user_id=session["user_id"],
            symbol=stock["symbol"],
            shares= -1 * shares,
            price=stock["price"]
        )
        flash("Sold!")
        return redirect("/")

    else:
       rows = db.execute("""
        SELECT "symbol"
        FROM "transactions"
        WHERE user_id = :user_id
        GROUP BY "symbol"
        HAVING SUM("shares") > 0;
    """, user_id=session["user_id"])
    return render_template("sell.html", symbols = [ row["symbol"] for row in rows ])

###############################################

def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)
